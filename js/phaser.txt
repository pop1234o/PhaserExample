package com.liyafeng.video.game.phaser;

 class Main_Phaser {


    /**
     * h5游戏引擎
     * https://phaser.io/
     * phaser游戏引擎需要利用js开发
     * ==================================
     * https://zhuanlan.zhihu.com/p/32846345 （）
     * ================================
     * https://github.com/photonstorm/phaser-examples (示例)
     *=====================================
     * https://github.com/photonstorm/phaser-ce/tree/master/build/custom  (自定义包)
     *
     * @param args
     */
    public static void main(String[] args) {

    }

     /**
      * phaser示例
      * https://segmentfault.com/a/1190000009226335
      *  preload - 尽管我们有预加载的场景，但如果你希望能缩短进入页面时加载的时间，可以分摊一些到其他场景，只需要在其他场景加入preload方法即可。
      *
      * create - 如果存在preload方法，则会在加载完毕后执行此方法；否则将在进入该场景时直接执行此方法。
      *
      * update - 更新周期自动执行的方法，例如在play场景的update方法中可以去检测两个物体是否有接触。
      *
      * render - 渲染完毕后执行的方法，例如可以在此方法中勾勒出物体的边缘，来方便观察物体的碰撞区域。
      *
      * ==========================
      * 总体4个场景（state）
      * 加载，开始（相当于一个logo展示），游戏，结束
      *
      *
      * ============3个物理引擎===========
      * Arcade
      * 最简单快速的物理引擎，因为只支持AABB式的碰撞，计算速度最快，实现简单的物理碰撞、接触、重力等效果最佳。
      * 全称是Axis-Aligned Bounding Box，直译就是轴对称盒
      *
      * p2
      * 如果说Arcade是小而精，P2引擎则是大而全了。各种物理模型均可实现，
      * 诸如多边形、弹簧、摩擦力、碰撞物体的材质、反弹系数等等都可以实现。尽管在性能上有一定消耗，
      * 毕竟要做更多复杂的运算，但为了效果，我们也很常用P2，作者引进P2也是由于它的全面。
      *
      * Box2D
      * 咦？为什么没有上面没有提到Box2D？很遗憾，这个引擎是收费的，40刀，如果没有特别大的需求，估计也用不上。
      *
      * =========================
      * 是因为Phaser只要焦点离开了页面，就会自动暂停游戏，包括定时任务也会暂停，而setInterval和setTimeout则不会
      *
      *
      *
      *
      */
     void fun1(){}
}


==============dragonbone===================
图集，和图集中图片的配置，json tex(texture)纹理
草图，Skeche
里面描述了
骨骼，骨骼是由父子关系的，里面的子骨骼的角度和位移都是相对于父骨骼的，

槽位，定义了槽位，和对应一个骨骼名称，插槽的位置对应骨骼的原点

皮肤，对应一个插槽，和一个display的名称，图片的中心为原点，然后根据插槽位置平移，和旋转
一个槽位上可以有多个皮肤，皮肤可以是图片，可以是mesh
这里要声名槽位所有的display，以便于后面动画播放的时候用，是个数组

这个是没有动画播放的初始样子
---------------
动画
bone数组 每个骨骼的动作 一个动画定义了骨骼的动画（旋转和平移）
slot 每个槽位显示的帧，用index来表示显示哪个display  index不写默认为0

骨骼数组负责运动，使得 骨骼-》槽位-》display（图片）也跟着骨骼运动，display和骨骼是相对静止的
（如果是mesh也是随着多个骨骼的运动而运动）


skin 皮肤  里面设置了这个插槽显示的所有可能，数组形式
  "transform": {
                    "x": 88.35,
                    "y": 0.34,    //坐标偏移
                    "skX": 89.8,
                    "skY": 89.8  //旋转角度
                  }


=====================

     let currentVisibleStudentByNo = EngineUtils.getCurrentVisibleStudentByNo(this.studentMap, "student_1");
        let student = currentVisibleStudentByNo["0"];
        if (student !== undefined) {
            let global = student.armature.getSlot("R_hand").global;
            let x = global.x * student.scale.x + student.x;
            let y = global.y * student.scale.y + student.y;
            console.log(x + "=========" + y);
        }


  let currentVisibleStudentByNo = EngineUtils.getCurrentVisibleStudentByNo(this.studentMap, "student_1");
            let student = currentVisibleStudentByNo["0"];
            if (inx === 0) {
                if (student !== undefined) {
                    student.armature.getSlot("R_hand").display = image;
                   //换装的原点是槽点，而元素的点是左上角
                }
                inx++;
            } else if (inx === 1) {
                student.armature.getSlot("R_hand").displayIndex = -1;
                image.x = 500;
                image.y = 500;
                game.add.existing(image);
                inx++;
            }

            //子精灵会根据父精灵的大小进行缩放，子精灵的位置是相对于父精灵的左上角
            //子精灵x,y坐标是要经过缩放的
          let image = this.game.make.image(500, 500, "img_pod");
           image.width = 800;
           image.height = 200;

           let dragonbone = game.createDragonbone("tod");
           dragonbone.x =300;
           dragonbone.y =500;
           image.addChild(dragonbone);

           game.add.existing(image);



==========插槽=============
一个骨骼可以有多个插槽，插槽的位置就是骨骼原点的位置
一个插槽可以有多个display（皮肤），但同一时间只能显示一个皮肤
插槽中用displayIndex来说明显示哪个皮肤，-1为不显示，0-1为skin中定义皮肤的索引


=============确定坐标============
1，确定坐标系原点
2.确定物体的锚点，  和x，有y